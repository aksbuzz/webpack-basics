/**
 * We have our AST, and we want to be able to 
 * visit different nodes with a visitor.
 * 
 * @param {*[]} ast Abstract syntax tree generated by parser
 * @param {Object} visitor An object with methods which will be called when visiting nodes
 */
export function traverser(ast, visitor) {
  function traverseArray(array, parent) {
    array.forEach(child => {
      traverseNode(child, parent);
    });
  }

  // will accept a `node` and its `parent` node
  function traverseNode(node, parent) {
    // check if methods exist on node type
    let methods = visitor[node.type];

    // if there is enter method, call it
    if (methods && methods.enter) {
      methods.enter(node, parent);
    }

    switch (node.type) {
      // Program node has property named body with
      // array of nodes.
      case 'Program':
        traverseArray(node.body, node);
        break;

      // Similarly for CallExpression and params
      case 'CallExpression':
        traverseArray(node.params, node);
        break;

      // These don't have any child nodes
      case 'NumberLiteral':
      case 'StringLiteral':
        break;

      default:
        throw new TypeError(node.type);
    }

    // If there is exit method, call it
    if (methods && methods.exit) {
      methods.exit(node, parent);
    }
  }

  traverseNode(ast, null);
}